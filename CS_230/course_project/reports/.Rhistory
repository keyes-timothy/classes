'IgL kappa',
'IKAROS_i',
'CD10',
'pAkt',
'CD24',
'CRLF2',
'RAG1',
'Pax5',
'pSyk',
'CD43',
'CD58',
'HIT3a',
'CD16',
'pS6',
'pErk',
'HLADR',
'pCreb'
)
paper_markers <-
c(
"CD45",
"CD10",
"CD58"
)
overexpressed_markers <-
c(
'PLCg2',
'CD22',
'p4EBP1',
'Ikaros',
'CD79b',
'pSTAT5',
'CD123',
'IKAROS_i',
'pAkt',
'CRLF2',
'Pax5',
'pSyk',
'HIT3a',
'pS6',
'pErk',
'pCreb'
)
#===============================================================================
clustered_data <-
sampled_data_path %>%
read_rds()
clustered_data
#read in data
clustered_data <-
sampled_data_path %>%
read_rds()
clustered_data %>%
count(patient, stimulation)
#%>%
#  unnest(cols = c(classifier_markers, remaining_markers, classification_data))
# Description
# Author: Timothy Keyes
# Version: 2020-02-05
# Libraries
library(tidyverse)
library(flowCore)
# Parameters
input_path <- here::here("CS_230", "course_project", "data-raw")
out_data <- here::here("CS_230", "course_project", "data")
marker_path <- here::here("CS_230", "course_project", "docs", "ALL_panel.csv")
#===============================================================================
#read in names of markers in the dataset
marker_names <-
marker_path %>%
read_csv() %>%
mutate(Metal = str_replace_all(Metal, "[()]", ""))
my_data <-
input_path %>%
list.files(path = ., full.names = TRUE) %>%
str_split(pattern = "_", simplify = TRUE) %>%
as_tibble() %>%
transmute(
file_name = list.files(path = input_path, full.names = TRUE),
patient = str_split(V1, pattern = "/") %>%
map_chr(.f = last),
stimulation = str_replace(V2, ".fcs", ""),
data =
map(
file_name,
~
read.FCS(
filename = .,
transformation = FALSE,
truncate_max_range = FALSE
) %>%
flowCore::exprs() %>%
as_tibble()
)
)
col_names <-
map(my_data$data, colnames) %>%
unlist() %>%
str_replace_all(pattern = "[()]", replacement = "") %>%
table() %>%
enframe()
#may have to change this data structure to use regular expressions
lookup_table <-
setNames(object = marker_names$Metal, nm = marker_names$protein)
tof_rename <- function(data, lookup_table) {
colnames(data) <- str_replace_all(colnames(data), "[()]", "")
my_lookups <- (lookup_table[which(lookup_table %in% colnames(data))])
data %>%
select(which(colnames(.) %in% lookup_table)) %>%
rename(!!! my_lookups)
}
my_data <-
my_data %>%
mutate(num_cols = map_dbl(data, ncol)) %>%
dplyr::filter(num_cols > 1) %>%
mutate(
data = map(data, tof_rename, lookup_table)
) %>%
select(-num_cols)
my_data <-
my_data %>%
group_by(file_name, patient, stimulation) %>%
unnest(cols = data)
my_data %>% distinct(stimulation)
my_data <-
input_path %>%
list.files(path = ., full.names = TRUE) %>%
str_split(pattern = "_", simplify = TRUE) %>%
as_tibble()
my_data
my_data$V1
my_data$V
my_data$2
my_data$V2
my_data$V3
my_data$V4
marker_names <-
marker_path %>%
read_csv() %>%
mutate(Metal = str_replace_all(Metal, "[()]", ""))
my_data <-
input_path %>%
list.files(path = ., full.names = TRUE) %>%
str_split(pattern = "_", simplify = TRUE) %>%
as_tibble() %>%
transmute(
file_name = list.files(path = input_path, full.names = TRUE),
patient = str_split(V3, pattern = "/") %>%
map_chr(.f = last),
stimulation = str_replace(V4, ".fcs", ""),
data =
map(
file_name,
~
read.FCS(
filename = .,
transformation = FALSE,
truncate_max_range = FALSE
) %>%
flowCore::exprs() %>%
as_tibble()
)
)
col_names <-
map(my_data$data, colnames) %>%
unlist() %>%
str_replace_all(pattern = "[()]", replacement = "") %>%
table() %>%
enframe()
#may have to change this data structure to use regular expressions
lookup_table <-
setNames(object = marker_names$Metal, nm = marker_names$protein)
tof_rename <- function(data, lookup_table) {
colnames(data) <- str_replace_all(colnames(data), "[()]", "")
my_lookups <- (lookup_table[which(lookup_table %in% colnames(data))])
data %>%
select(which(colnames(.) %in% lookup_table)) %>%
rename(!!! my_lookups)
}
my_data <-
my_data %>%
mutate(num_cols = map_dbl(data, ncol)) %>%
dplyr::filter(num_cols > 1) %>%
mutate(
data = map(data, tof_rename, lookup_table)
) %>%
select(-num_cols)
my_data <-
my_data %>%
group_by(file_name, patient, stimulation) %>%
unnest(cols = data)
my_data %>% distinct(stimulation)
?distinct
unique(my_data$stimulation)
my_data %>% filter(stimulation == "Basal") %>% count()
my_data %>% dplyr::filter(stimulation == "Basal") %>% count()
my_data %>% ungroup() %>% dplyr::filter(stimulation == "Basal") %>% count()
my_data %>% ungroup() %>% dplyr::filter(stimulation == "Basal") %>% count(patient)
my_data %>%
filter(stimulation == "Basal") %>%
group_by(patient) %>%
dplyr::filter(count(patient) >= 10000)
my_data %>%
filter(stimulation == "Basal") %>%
group_by(patient) %>%
dplyr::filter(count(., patient) >= 10000)
my_data %>%
dplyr::filter(stimulation == "Basal") %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000)
my_data %>%
dplyr::filter(stimulation == "Basal") %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000) %>%
count(patient)
my_data %>%
dplyr::filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000) %>%
count(patient)
sampled_data <-
my_data %>%
dplyr::filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000) %>%
count(patient)
sample_n(size = 10000, replace = FALSE)
sampled_data <-
my_data %>%
dplyr::filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000) %>%
ungroup() %>%
sample_n(size = 10000, replace = FALSE)
write_rds(
x = sampled_data, path = file.path(out_data, "sampled_DDPR_data.rds"), compress =  "gz"
)
library(flowCore)
library(tidyverse)
# Parameters
input_path <- here::here("CS_230", "course_project", "data", "classified_data.rds")
out_data <- here::here("CS_230", "course_project", "data")
marker_path <- here::here("CS_230", "course_project", "docs", "ALL_panel.csv")
#===============================================================================
my_data <-
input_path %>%
read.rds()
write_rds(x = my_data, path = file.path(out_data, "sampled_cluster"))
my_data %>% colnames()
my_data <-
input_path %>%
read.rds() %>%
filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
filter(n() >= 10000) %>%
ungroup() %>%
sample_n(size = 10000)
library(flowCore)
library(tidyverse)
# Parameters
input_path <- here::here("CS_230", "course_project", "data", "classified_data.rds")
out_data <- here::here("CS_230", "course_project", "data")
marker_path <- here::here("CS_230", "course_project", "docs", "ALL_panel.csv")
#===============================================================================
my_data <-
input_path %>%
read_rds() %>%
filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
filter(n() >= 10000) %>%
ungroup() %>%
sample_n(size = 10000)
my_data <-
input_path %>%
read_rds() %>%
dplyr::filter(stimulation == "Basal", !str_detect(patient, "Relapse")) %>%
group_by(patient) %>%
dplyr::filter(n() >= 10000) %>%
ungroup() %>%
sample_n(size = 10000)
my_data <-
input_path %>%
read_rds()
colnames(my_data)
my_data$data[[1]]
?source
source(file = file.path("~", "GitHub", "classes", "CS230", "course_project", "r_scripts", "build_classifier.R"))
source("~/GitHub/classes/CS230/course_project/r_scripts/build_classifier.R")
source(file = file.path("~", "tkeyes", "GitHub", "classes", "CS230", "course_project", "r_scripts", "build_classifier.R"))
source("~/tkeyes/GitHub/classes/CS230/course_project/r_scripts/build_classifier.R")
source(file = file.path("~", "GitHub", "classes", "CS_230", "course_project", "r_scripts", "build_classifier.R"))
source(
file =
file.path("~", "GitHub", "classes", "CS_230", "course_project", "r_scripts", "apply_classifier.R"
)
)
knitr::opts_chunk$set(echo = FALSE)
# Libraries
library(tidyverse)
library(rlang)
library(reticulate)
# Parameters
data_path <- here::here("CS_230", "course_project", "data", "classified_DDPR_data.rds")
sampled_data_path <- here::here("CS_230", "course_project", "data", "sampled_DDPR_data.rds")
saucie_data_path <- here::here("CS_230", "course_project", "data", "sampled_DDPR_data.rds")
cluster_column <- "classified_population"
plot_out_path <- here::here("CS230", "course_project", "eda")
metadata <- c("patient")
CLASSIFIER_POPULATIONS <-
c(
"HSC",
"Progenitor_1",
"Progenitor_2",
"Progenitor_3",
"Pre_Pro_B",
"Pro_B1",
"Pro_B2",
"Pre_B1",
"Pre_B2",
"Early_Progenitors",
"Late_Progenitors",
"Immature_B1",
"Immature_B2",
"Mature_B",
"Mature_Non_B"
)
MARKERS <-
c(
'CD19',
'CD20',
'CD34',
'CD38',
'IgMi',
'IgMs',
'CD179a',
'CD179b',
'CD127',
'Tdt',
'CD45',
'PLCg2',
'CD22',
'p4EBP1',
'Ikaros',
'CD79b',
'pSTAT5',
'CD123',
'Ki67',
'IgL kappa',
'IKAROS_i',
'CD10',
'pAkt',
'CD24',
'CRLF2',
'RAG1',
'Pax5',
'pSyk',
'CD43',
'CD58',
'HIT3a',
'CD16',
'pS6',
'pErk',
'HLADR',
'pCreb'
)
paper_markers <-
c(
"CD45",
"CD10",
"CD58"
)
overexpressed_markers <-
c(
'PLCg2',
'CD22',
'p4EBP1',
'Ikaros',
'CD79b',
'pSTAT5',
'CD123',
'IKAROS_i',
'pAkt',
'CRLF2',
'Pax5',
'pSyk',
'HIT3a',
'pS6',
'pErk',
'pCreb'
)
#===============================================================================
py_discover_config()
py_config()
py_config()
Sys.which("python")
Sys.which("python")
py_discover_config()
use_python("/anaconda3/envs/saucie_env/bin/python")
knitr::opts_chunk$set(echo = FALSE)
# Libraries
library(tidyverse)
library(rlang)
library(reticulate)
# Parameters
data_path <- here::here("CS_230", "course_project", "data", "classified_DDPR_data.rds")
sampled_data_path <- here::here("CS_230", "course_project", "data", "sampled_DDPR_data.rds")
saucie_data_path <- here::here("CS_230", "course_project", "data", "sampled_DDPR_data.rds")
cluster_column <- "classified_population"
plot_out_path <- here::here("CS230", "course_project", "eda")
metadata <- c("patient")
CLASSIFIER_POPULATIONS <-
c(
"HSC",
"Progenitor_1",
"Progenitor_2",
"Progenitor_3",
"Pre_Pro_B",
"Pro_B1",
"Pro_B2",
"Pre_B1",
"Pre_B2",
"Early_Progenitors",
"Late_Progenitors",
"Immature_B1",
"Immature_B2",
"Mature_B",
"Mature_Non_B"
)
MARKERS <-
c(
'CD19',
'CD20',
'CD34',
'CD38',
'IgMi',
'IgMs',
'CD179a',
'CD179b',
'CD127',
'Tdt',
'CD45',
'PLCg2',
'CD22',
'p4EBP1',
'Ikaros',
'CD79b',
'pSTAT5',
'CD123',
'Ki67',
'IgL kappa',
'IKAROS_i',
'CD10',
'pAkt',
'CD24',
'CRLF2',
'RAG1',
'Pax5',
'pSyk',
'CD43',
'CD58',
'HIT3a',
'CD16',
'pS6',
'pErk',
'HLADR',
'pCreb'
)
paper_markers <-
c(
"CD45",
"CD10",
"CD58"
)
overexpressed_markers <-
c(
'PLCg2',
'CD22',
'p4EBP1',
'Ikaros',
'CD79b',
'pSTAT5',
'CD123',
'IKAROS_i',
'pAkt',
'CRLF2',
'Pax5',
'pSyk',
'HIT3a',
'pS6',
'pErk',
'pCreb'
)
#===============================================================================
use_python("/anaconda3/envs/saucie_env/bin/python")
py$test_list
py$test_list %>% print()
py$test_list %>% typeof()
py$test_list[[1]]
py$test_list[[5]]
py$test_list[[0]]
py$test_list[[77]]
reticulate::repl_python()
tim
typeof
reticulate::repl_python()
?import_from_path
reticulate::repl_python()
source_python(file = "~/Desktop/saucie_project/SAUCIE/example.py")
source_python(file = "~/Desktop/saucie_project/SAUCIE/example.py")
sys.path
sys.path()
reticulate::repl_python()
